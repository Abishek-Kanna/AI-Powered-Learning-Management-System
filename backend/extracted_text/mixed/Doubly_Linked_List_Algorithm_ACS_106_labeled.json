[
  {
    "page": 1,
    "bbox": null,
    "text": "Page 1 of 13\n\nfa} Home =‘ [z] Whiteboard </> Online Compilers Practice [4 Articles AI Assistant\n\nSQL HTML CSS Javascript Python Java C C++ PHP Scala Ci>\n\nDoubly Linked List Data Structure\n\nWhat is Doubly Linked List?\n\nDoubly Linked List is a variation of Linked list in which navigation is possible in both\nways, forward as well as backward easily as compared to Single Linked List. Following\nare the important terms to understand the concept of doubly linked list.\n\n= Link — Each link of a linked list can store a data called an element.\n= Next — Each link of a linked list contains a link to the next link called Next.\n= Prev — Each link of a linked list contains a link to the previous link called Prev.\n\n= Linked List — A Linked List contains the connection link to the first link called\nFirst and to the last link called Last.\n\nDoubly Linked List Representation\n\nNULL\nHead L¢ A Next ||, ____— Next || .__— Next\n5 Prev oa Prev | Prev\n\nNULL\n\nAs per the above illustration, following are the important points to be considered.\n\nDoubly Linked List contains a link element called first and last.\n\nEach link carries a data field(s) and a link field called next.\n\nEach link is linked with its next link using its next link.\n\nEach link is linked with its previous link using its previous link.\n\nhttps://www.tutorialspoint.com/data_structures_algorithms/doubly_linked_list_algorithm.htm 1/13",
    "type": "text"
  },
  {
    "page": 2,
    "bbox": null,
    "text": "Page 2 of 13\n\n= The last link carries a link as null to mark the end of the list.\n\nBasic Operations in Doubly Linked List\n\nFollowing are the basic operations supported by a list.\n\n= Insertion — Adds an element at the beginning of the list.\n\n= Insert Last — Adds an element at the end of the list.\n\n= Insert After — Adds an element after an item of the list.\n\n= Deletion — Deletes an element at the beginning of the list.\n\n= Delete Last — Deletes an element from the end of the list.\n\n= Delete — Deletes an element from the list using the key.\n\n= Display forward — Displays the complete list in a forward manner.\n\n= Display backward — Displays the complete list in a backward manner.\n\nDoubly Linked List - Insertion at the Beginning\n\nIn this operation, we create a new node with three compartments, one containing the\ndata, the others containing the address of its previous and next nodes in the list. This\nnew node is inserted at the beginning of the list.\n\nAlgorithm\n\n- START\n\n. Create a new node with three variables: prev, data, next.\n\n. If the list is empty, make the new node as head.\n\n1\n2\n3. Store the new data in the data variable\n4\n5\n\n. Otherwise, link the address of the existing first node to the\nnext variable of the new node, and assign null to the prev variable.\n6. Point the head to the new node.\n\n7. END\n\nExample\n\nFollowing are the implementations of this operation in various programming languages —\n\nC C++ Java Python\n<p\n\nhttps://www.tutorialspoint.com/data_structures_algorithms/doubly_linked_list_algorithm.htm 2/13",
    "type": "text"
  },
  {
    "page": 3,
    "bbox": null,
    "text": "Page 3 of 13\n\n#Python code for doubly linked list\nclass Node:\ndef init__(self, data=None, key=None):\nself.data = data\nself.key = key\nself.next = None\nself.prev = None\n#this link always point to first Link\nhead = None\n#this link always point to last Link\nlast = None\ncurrent = None\n\n#is list empty\n\ndef is empty():\n\nreturn head == None\n#display the doubly linked list\ndef print_list():\nptr = head\nwhile ptr != None:\nprint(f\"({ptr.key}, {ptr.data})\")\nptr = ptr.next\n#insert link at the first location\ndef insert_first(key, data):\nglobal head, last\n#create a link\nlink = Node(data, key)\nif is_empty():\n#make it the last link\nlast = link\nelse:\n#update first prev link\nhead.prev = link\n#point it to old first link\nlink.next = head\n#point first to new first link\nhead = link\ninsert_first(1,10)\ninsert_first(2, 20)\ninsert_first(3, 30)\ninsert_first(4,1)\ninsert_first(5,40)\n\nhttps://www.tutorialspoint.com/data_structures_algorithms/doubly_linked_list_algorithm.htm",
    "type": "text"
  },
  {
    "page": 4,
    "bbox": null,
    "text": "Page 4 of 13\n\ninsert_first(6,56)\nprint(\"Doubly Linked List: \")\n\nprint_list()\n\nOutput\n\nDoubly Linked List:\n(6,56) (5,40) (4,1) (3,30) (2,20) (1,10)\n\nDoubly Linked List - Insertion at the End\n\nIn this insertion operation, the new input node is added at the end of the doubly linked\nlist; if the list is not empty. The head will be pointed to the new node, if the list is empty.\n\nAlgorithm\n\n. START\n2. If the list is empty, add the node to the list and point\nthe head to it.\n3. If the list is not empty, find the last node of the list.\n. Create a link between the last node in the list and the\nnew node.\n. The new node will point to NULL as it is the new last node.\n\n. END\n\nExample\nFollowing are the implementations of this operation in various programming languages —\n\nC C++ Java\n\n</> Open Compiler\n\nclass Node:\ndef (self, data= » key=\nself.data = data\n\nself.key = key\n\nself.next\n\nself.prev\n\nhttps://www.tutorialspoint.com/data_structures_algorithms/doubly_linked_list_algorithm.htm 4/13",
    "type": "text"
  },
  {
    "page": 5,
    "bbox": null,
    "text": "Page 5 of 13\n\ncurrent =\ndef ():\nreturn head ==\ndef ():\nptr = head\nwhile ptr !=\nprint(f\"({ptr.key}, {ptr.data})\", end=\" \")\nptr = ptr.next\n(key, data):\nglobal head, last\nlink = Node(data, key)\nif isEmpty():\nlast = link\nelse:\nhead.prev = link\nlink.next = head\nhead = link\n(key, data):\nglobal head, last\nlink = Node(data, key)\nif isEmpty():\nlast = link\nelse:\nlast.next\nlink.prev\nlast = link\ninsertFirst(1,10)\ninsertFirst(2, 20)\ninsertFirst(3, 30)\ninsertFirst(4,1)\ninsertLast(5,4@)\ninsertLast(6,56)\nprint( \"Doubly Linked List: \", end=\"\")\nprintList()\n\nOutput\n\nDoubly Linked List: (4,1) (3,30) (2,20) (1,10) (5,40) (6,56)\n\nDoubly Linked List - Deletion at the Beginning\n\nhttps://www.tutorialspoint.com/data_structures_algorithms/doubly_linked_list_algorithm.htm",
    "type": "text"
  },
  {
    "page": 6,
    "bbox": null,
    "text": "Page 6 of 13\n\nThis deletion operation deletes the existing first nodes in the doubly linked list. The head\n\nis shifted to the next node and the link is removed.\n\nAlgorithm\n\n. START\n\n. Check the status of the doubly linked list\n\n. If the list is empty, deletion is not possible\n\n. If the list is not empty, the head pointer is\nshifted to the next node.\n\n. END\n\nExample\n\nFollowing are the implementations of this operation in various programming languages —\n\nC C++ Java Python\n\n</>\n\n#Python code for doubly linked list\nclass Node:\ndef (self, data= » key=\nself.data = data\nself.key = key\nself.next =\nself.prev =\n#this link always point to first Link\nhead =\n#this link always point to last Link\nlast =\ncurrent =\n#is list empty\ndef ():\nreturn head ==\n#display the doubly linked list\ndef ():\nptr = head\nwhile ptr !=\nprint(f\"({ptr.key},{ptr.data}) \", end=\"\")\nptr = ptr.next\n\nhttps://www.tutorialspoint.com/data_structures_algorithms/doubly_linked_list_algorithm.htm\n\nOpen Compiler",
    "type": "text"
  },
  {
    "page": 7,
    "bbox": null,
    "text": "#insert link at the first location\ndef (key, data):\n#create a link\nglobal head, last\nlink = Node(data, key)\nif isEmpty():\n#make it the last link\nlast = link\nelse:\n#update first prev link\nhead.prev = link\n#point it to old first link\nlink.next = head\nhead = link\n#delete first item\ndef ():\n#save reference to first link\nglobal head, last\ntempLink = head\n#if only one link\nif head.next ==\nlast =\nelse:\nhead.next.prev =\nhead = head.next\n#return the deleted link\nreturn tempLink\ninsertFirst(1,1@)\ninsertFirst(2, 20)\n\ninsertFirst(3,3@)\n\ninsertFirst(4,1)\n\ninsertFirst(5,4@)\n\ninsertFirst(6,56)\n\nprint(\"Doubly Linked List:\")\n\nprintList()\n\nprint(\"\\nList after deleting first record:\")\ndeleteFirst()\n\nprintList()\n\nhttps://www.tutorialspoint.com/data_structures_algorithms/doubly_linked_list_algorithm.htm\n\nPage 7 of 13",
    "type": "text"
  },
  {
    "page": 8,
    "bbox": null,
    "text": "Page 8 of 13\n\nDoubly Linked List:\n\n(6,56) (5,40) (4,1) (3,30) (2,20) (1,10)\nList after deleting first record:\n\n(5,40) (4,1) (3,30) (2,20) (1,10)\n\nDoubly Linked List - Complete Implementation\n\nFollowing are the complete implementations of Doubly Linked List in various\nprogramming languages —\n\nC C++ Java Python\nGP Chapters v oo Categories v =\n\nclass Node:\ndef (self, key, data):\nself.key = key\nself.data = data\nself.next =\n\nself.prev =\n\nclass DoublyLinkedList:\n\ndef (self):\nself.head =\nself.last =\n\n(self):\n\nreturn self.head is\n\n(self):\nptr = self.head\nprint(\"[\", end=\" \")\nwhile ptr:\nprint(\"({}, {})\".format(ptr.key, ptr.data), end=\" \")\nptr = ptr.next\nprint(\"]\")\n\n(self):\nptr = self.last\nprint(\"[\", end=\" \")\nwhile ptr:\n\nhttps://www.tutorialspoint.com/data_structures_algorithms/doubly_linked_list_algorithm.htm",
    "type": "text"
  },
  {
    "page": 9,
    "bbox": null,
    "text": "Page 9 of 13\n\nprint(\"({}, {})\".format(ptr.key, ptr.data), end=\" \")\nptr = ptr.prev\nprint(\"]\")\n\ninsert_first(self, key, data):\nlink = Node(key, data)\nif self.is_ empty():\n\nself.last = link\nelse:\n\nself.head.prev = link\nlink.next = self.head\nself.head = link\n\ninsert_last(self, key, data):\nlink = Node(key, data)\nif self.is_ empty():\nself.last = link\nelse:\nself.last.next = link\nlink.prev = self.last\nself.last = link\n\ndelete first(self):\nif self.is_ empty():\n\nreturn None\ntemp link = self.head\nif self.head.next is None:\nself.last = None\nelse:\nself.head.next.prev = None\nself.head = self.head.next\n\nreturn temp_link\n\ndelete last(self):\n\nif self.is_ empty():\nreturn None\n\ntemp link = self.last\n\nif self.head.next is None:\nself.head = None\n\nelse:\nself.last.prev.next = None\n\nself.last = self.last.prev\n\nhttps://www.tutorialspoint.com/data_structures_algorithms/doubly_linked_list_algorithm.htm",
    "type": "text"
  },
  {
    "page": 10,
    "bbox": null,
    "text": "Page 10 of 13\n\nreturn temp_link\n\ndelete(self, key):\ncurrent = self.head\nwhile current and current.key != key:\ncurrent = current.next\nif current is None:\nreturn None\nif current == self.head:\nself.head = self.head.next\nelse:\ncurrent.prev.next = current.next\nif current == self.last:\nself.last = current.prev\nelse:\ncurrent.next.prev = current.prev\n\nreturn current\n\ninsert_after(self, key, new_key, data):\n\ncurrent = self.head\n\nwhile current and current.key != key:\ncurrent = current.next\n\nif current is None:\n\nreturn False\n\nnew_link = Node(new_key, data)\n\nif current == self.last:\nnew_link.next = None\nself.last = new_link\nelse:\nnew_link.next = current.next\ncurrent.next.prev = new_link\nnew_link.prev = current\ncurrent.next = new_link\n\nreturn True\n\n# Example usage\n\ndll = DoublyLinkedList()\ndll.insert_first(1, 10)\ndll.insert_first(2, 20)\ndll.insert_first(3, 30)\ndll.insert_first(4, 1)\ndll.insert_first(5, 40)\n\nhttps://www.tutorialspoint.com/data_structures_algorithms/doubly_linked_list_algorithm.htm",
    "type": "text"
  },
  {
    "page": 11,
    "bbox": null,
    "text": "Page 11 of 13\n\ndll.insert_first(6, »)\n\nprint(\"List (First to Last):\ndll1.display_forward()\n\nprint()\n\nprint(\"List (Last to First):\")\ndll1.display_backward()\n\nprint(\"List, after deleting first record:\")\ndll.delete_first()\n\ndll1.display_forward()\n\nprint(\"List, after deleting last record:\")\ndll.delete_last()\n\ndll1.display_forward()\n\nprint(\"List, insert after key(4):\")\ndll.insert_after(4, 7, »)\ndll1.display_forward()\n\nprint(\"List, after delete key(4):\")\ndll1.delete(4)\n\ndll1.display_forward()\n\nOutput\n\nList (First to Last):\n[ (6, 56) (5, 40) (4, 1) (3, 30) (2, 20) (1, 10) ]\n\nList (Last to First):\n\n[ (1, 10) (2, 20) (3, 30) (4, 1) (5, 40) (6, 56) ]\nList, after deleting first record:\n\n[ (5, 40) (4, 1) (3, 30) (2, 20) (1, 10) ]\n\nList, after deleting last record:\n\n[ (5, 40) (4, 1) (3, 30) (2, 20) ]\n\nList, insert after key(4):\n\n[ (5, 40) (4, 1) (7, 13) (3, 30) (2, 20) ]\n\nList, after delete key(4):\n\n[ (5, 40) (7, 13) (3, 30) (2, 20) ]\n\nTOP TUTORIALS\n\nPython Tutorial\n\nJava Tutorial\n\nhttps://www.tutorialspoint.com/data_structures_algorithms/doubly_linked_list_algorithm.htm 11/13",
    "type": "text"
  },
  {
    "page": 12,
    "bbox": null,
    "text": "Page 12 of 13\nC++ Tutorial\nC Programming Tutorial\nC# Tutorial\nPHP Tutorial\nR Tutorial\nHTML Tutorial\nCSS Tutorial\nJavaScript Tutorial\n\nSQL Tutorial\n\nTRENDING TECHNOLOGIES\n\nCloud Computing Tutorial\nAmazon Web Services Tutorial\nMicrosoft Azure Tutorial\n\nGit Tutorial\n\nEthical Hacking Tutorial\nDocker Tutorial\n\nKubernetes Tutorial\n\nDSA Tutorial\n\nSpring Boot Tutorial\n\nSDLC Tutorial\n\nUnix Tutorial\n\nCERTIFICATIONS\n\nBusiness Analytics Certification\n\nJava & Spring Boot Advanced Certification\nData Science Advanced Certification\n\nCloud Computing And DevOps\n\nAdvanced Certification In Business Analytics\nArtificial Intelligence And Machine Learning\nDevOps Certification\n\nGame Development Certification\n\nFront-End Developer Certification\n\nAWS Certification Training\n\nPython Programming Certification\n\nhttps://www.tutorialspoint.com/data_structures_algorithms/doubly_linked_list_algorithm.htm",
    "type": "text"
  },
  {
    "page": 13,
    "bbox": null,
    "text": "Page 13 of 13\n\nCOMPILERS & EDITORS\n\nOnline Java Compiler\nOnline Python Compiler\nOnline Go Compiler\nOnline C Compiler\nOnline C++ Compiler\nOnline C# Compiler\nOnline PHP Compiler\nOnline MATLAB Compiler\nOnline Bash Terminal\nOnline SQL Compiler\nOnline Html Editor\n\nABOUTUS |  OURTEAM | CAREERS | JOBS |  CONTACTUS | TERMS OFUSE |\n\nPRIVACY POLICY | REFUND POLICY | COOKIES POLICY | FAQ'S\n\n7\") tutorialspoint\n\nf X @ in ©\n\nGET IT ON 4 Download on the\n=” Google Play | App Store\n\nTutorials Point is a leading Ed Tech company striving to provide the best learning material on\ntechnical and non-technical subjects.\n\n© Copyright 2025. All Rights Reserved.\n\nhttps://www.tutorialspoint.com/data_structures_algorithms/doubly_linked_list_algorithm.htm",
    "type": "text"
  }
]