[
  {
    "index": 1,
    "question": "What is the primary characteristic that distinguishes a doubly linked list from a singly linked list?",
    "user_answer": "",
    "correct_answer": "B",
    "options": {
      "A": "It only allows forward traversal.",
      "B": "It contains pointers to both the next and previous nodes.",
      "C": "It is less efficient for data storage.",
      "D": "It only stores numerical data."
    },
    "explanation": "Okay, let’s break this down and get you understanding this concept!\n\n**The Correct Answer is B) It contains pointers to both the next and previous nodes.**\n\nLet’s talk about what makes a doubly linked list special. Imagine a regular, simple linked list – we call that a *singly* linked list. In a singly linked list, each node only has a pointer that points to the *next* node in the sequence. Think of it like a one-way street. You can only travel forward.\n\nNow, a *doubly* linked list is different. It’s like having a two-way street! Each node in a doubly linked list has *two* pointers:\n\n1.  **One pointer points to the next node.** (Just like a singly linked list)\n2.  **Another pointer points to the previous node.** \n\nThis “previous” pointer is the key difference. Because of this extra pointer, you can easily traverse the list in *both* directions – forward *and* backward.  \n\n**Why your answer (not providing an answer) was wrong:** Simply not answering the question didn't show you understood the core concept.\n\n**Why the other options are incorrect:**\n\n*   **A) It only allows forward traversal:** This is exactly the opposite of what a doubly linked list does.\n*   **C) It is less efficient for data storage:** Doubly linked lists are generally *more* efficient than singly linked lists when you need to move between nodes in both directions frequently.\n*   **D) It only stores numerical data:** Data types (numerical, text, etc.) have absolutely nothing to do with the structure of a linked list.\n\n**Let’s use an analogy:**\n\nThink of a book. \n\n*   **Singly Linked List:**  You can only read the pages in order, from beginning to end.\n*   **Doubly Linked List:** You can read the book from beginning to end *and* from end to beginning!\n\n---\n\nDo you want to try another question, or would you like me to explain this concept in a different way, perhaps with a visual representation (like a diagram)?"
  },
  {
    "index": 2,
    "question": "Which of the following best describes the role of a node in a doubly linked list?",
    "user_answer": "",
    "correct_answer": "B",
    "options": {
      "A": "It solely stores data values.",
      "B": "It maintains pointers to the next and previous nodes.",
      "C": "It only facilitates forward traversal.",
      "D": "It is a placeholder for data management."
    },
    "explanation": "Okay, let’s break down this question about doubly linked lists. It's great that you're tackling it – getting things wrong is a really important part of learning!\n\n**Here’s the explanation:**\n\nA doubly linked list is a special type of data structure where each node not only points to the *next* node in the sequence, but also to the *previous* node. Think of it like a two-way street for data! \n\nLet’s look at why option B is correct: **“It maintains pointers to the next and previous nodes.”** \n\n* **Pointers are Key:**  In computer science, a “pointer” is essentially a small piece of memory that holds the *address* of another location in memory. In a linked list, we use pointers to connect the nodes together.\n* **Why it Matters:** This allows us to move both *forward* (to the next node) *and* *backward* (to the previous node) within the list. If we *only* had pointers to the next node, we’d be stuck moving in one direction!\n\n**Now, let’s see why the other options are incorrect:**\n\n* **A) It solely stores data values.** While a node *does* store data, that's not its *primary* role. Its main purpose is to connect to other nodes.\n* **C) It only facilitates forward traversal.** This is completely wrong! A doubly linked list’s power comes from being able to go both ways.\n* **D) It is a placeholder for data management.**  This is too vague. It's a placeholder, but it's a placeholder that *also* holds pointers and links to other nodes.\n\n\n**Simple Analogy:**\n\nImagine a chain. Each link in the chain has two ends – one that connects to the link before it, and one that connects to the link after it. That's essentially what a node in a doubly linked list does.\n\n---\n\n**Do you want to try another question about linked lists, or would you like me to explain this concept in more detail (e.g., with a visual diagram)?**"
  }
]