[
  {
    "index": 1,
    "question": "What is the primary characteristic that distinguishes a doubly linked list from a singly linked list?",
    "user_answer": "",
    "correct_answer": "B",
    "options": {
      "A": "It only allows forward traversal.",
      "B": "It contains pointers to both the next and previous nodes.",
      "C": "It is less efficient for data storage.",
      "D": "It only stores numerical data."
    },
    "explanation": "Okay, let's break down this question and why the correct answer is B.\n\n**Here's the explanation:**\n\nThink of a linked list like a chain of paperclips.\n\n*   **Singly Linked List:** In a singly linked list, each paperclip only has a link to the *next* paperclip in the chain. You can only move forward through the list, one paperclip at a time.  It's like reading a book – you have to turn the page to go to the next piece of information.\n\n*   **Doubly Linked List:** Now, imagine each paperclip *also* has a link back to the previous paperclip. That’s what makes it doubly linked. You can not only move forward to the next paperclip, but you can *also* move backward to the previous one. \n\n**Why option B is correct:**\n\nThe key difference is that a doubly linked list has *pointers* (links) that point to both the *next* node *and* the *previous* node. This allows for traversal in both directions – forward and backward.\n\n**Why the other options are wrong:**\n\n*   **A) It only allows forward traversal:** This is true for *singly* linked lists, not doubly linked lists.\n*   **C) It is less efficient for data storage:**  The size of data storage is related to the data stored in the nodes, not the type of link list. Both singly and doubly linked lists have the same storage requirements for each node (the data and the pointer).\n*   **D) It only stores numerical data:**  Linked lists can store any type of data – numbers, strings, objects – it’s the structure of the list that matters, not the data it holds.\n\n\n**In short, the defining feature of a doubly linked list is its ability to have links pointing to both the next and previous nodes.** \n\nDo you want to try another example, or would you like me to explain any part of this in more detail?"
  }
]