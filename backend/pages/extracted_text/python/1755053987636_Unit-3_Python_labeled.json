[
  {
    "page": 1,
    "bbox": null,
    "text": "Unit 3: Collections, Strings, and Regular Expressions\n\n1. Longest Substring Without Repeating Characters ( #3 )\nGiven a string s, find the length of the longest substring without duplicate characters.\nExample 1:\nInput: s = \"abcabcbb\"\nOutput: 3\nExplanation: The answer is \"abc\", with the length of 3.\nExample 2:\nInput: s = \"bbbbb\"\nOutput: 1\nExplanation: The answer is \"b\", with the length of 1.\nExample 3:\nInput: s = \"pwwkew\"\nOutput: 3\nExplanation: The answer is \"wke\", with the length of 3.\nNotice that the answer must be a substring, \"pwke\" is a subsequence and not a substring.\n\n2. Longest Palindromic Substring ( #5 )\nGiven a string s, return the longest palindromic substring in s.\nExample 1:\nInput: s = \"babad\"\nOutput: \"bab\"\nExplanation: \"aba\" is also a valid answer.\nExample 2:\nInput: s = \"cbbd\"\nOutput: \"bb\"\n\n3. Valid Parentheses ( #20 )\nGiven a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input\nstring is valid.\nAn input string is valid if:\n1. Open brackets must be closed by the same type of brackets.\n2. Open brackets must be closed in the correct order.\n3. Every close bracket has a corresponding open bracket of the same type.\nExample 1:\nInput: s = \"()\"\nOutput: true\nExample 2:\nInput: s = \"()[]{}\"\nOutput: true\nExample 3:\nInput: s = \"(]\"\nOutput: false",
    "type": "text"
  },
  {
    "page": 2,
    "bbox": null,
    "text": "4. Valid Palindrome ( #125 )\nA phrase is a palindrome if, after converting all uppercase letters into lowercase letters and\nremoving all non-alphanumeric characters, it reads the same forward and backward.\nAlphanumeric characters include letters and numbers. Given a string s, return true if it is\na palindrome, or false otherwise.\nExample 1:\nInput: s = \"A man, a plan, a canal: Panama\"\nOutput: true\nExplanation: \"amanaplanacanalpanama\" is a palindrome.\nExample 2:\nInput: s = \"race a car\"\nOutput: false\nExplanation: \"raceacar\" is not a palindrome.\nExample 3:\nInput: s=\"\"\nOutput: true\nExplanation: s is an empty string \"\" after removing non-alphanumeric characters.\nSince an empty string reads the same forward and backward, it is a palindrome.\n\n5. Find All Anagrams in a String ( #438 )\nGiven two strings s and p, return an array of all the start indices of p's anagrams in s. You\nmay return the answer in any order.\nExample 1:\nInput: s = \"cbaebabacd\", p = \"abc\"\nOutput: [0,6]\nExplanation:\nThe substring with start index = 0 is \"cba\", which is an anagram of \"abc\".\nThe substring with start index = 6 is \"bac\", which is an anagram of \"abc\".\nExample 2:\nInput: s = \"\"abab\", p = \"ab\"\nOutput: [0,1,2]\nExplanation:\nThe substring with start index = 0 is \"ab\", which is an anagram of \"ab\".\nThe substring with start index = 1 is \"ba\", which is an anagram of \"ab\".\nThe substring with start index = 2 is \"ab\", which is an anagram of \"ab\".\n\n6. Reverse Words in a String ( #151 )\nGiven an input string s, reverse the order of the words. A word is defined as a sequence of non-\nspace characters. The words in s will be separated by at least one space. Return a string of the\nwords in reverse order concatenated by a single space. Note that s may contain leading or trailing\nspaces or multiple spaces between two words. The returned string should only have a single\nspace separating the words. Do not include any extra spaces.\nExample 1:\nInput: s = \"the sky is blue'\nOutput: \"blue is sky the\"\nExample 2:\nInput: s =\" hello world \"\nOutput: \"world hello\"",
    "type": "text"
  },
  {
    "page": 3,
    "bbox": null,
    "text": "Explanation: Your reversed string should not contain leading or trailing spaces.\n\nExample 3:\n\nInput: s=\"a good example\"\n\nOutput: \"example good a\"\n\nExplanation: You need to reduce multiple spaces between two words to a single space in the\nreversed string.\n\n7. Find the Index of the First Occurrence in a String ( #28 )\nGiven two strings needle and haystack, return the index of the first occurrence\nof needle in haystack, or -1 if needle is not part of haystack.\nExample 1:\n\nInput: haystack = \"sadbutsad\", needle = \"sad\"\n\nOutput: 0\n\nExplanation: \"sad\" occurs at index 0 and 6.\n\nThe first occurrence is at index 0, so we return 0.\n\nExample 2:\n\nInput: haystack = \"leetcode\", needle = \"leeto\"\n\nOutput: -1\n\nExplanation: \"leeto\" did not occur in \"leetcode\", so we return -1.\n\n8. Reverse Prefix of Word ( #2000 )\nGiven a 0-indexed string word and a character ch, reverse the segment of word that starts at\nindex O and ends at the index of the first occurrence of ch (inclusive). If the\ncharacter ch does not exist in word, do nothing.\n\ne For example, if word = \"abcdefd\" and ch = \"d\", then you should reverse the segment\n\nthat starts at O and ends at 3 (inclusive). The resulting string will be \"dcbaefd\".\n\nReturn the resulting string.\nExample 1:\nInput: word = \"abcdefd\", ch = \"d\"\nOutput: \"dcbaefd\"\nExplanation: The first occurrence of \"d\" is at index 3.\nReverse the part of word from 0 to 3 (inclusive), the resulting string is \"dcbaefd\".\nExample 2:\nInput: word = \"xyxzxe\", ch = \"z\"\nOutput: \"zxyxxe\"\nExplanation: The first and only occurrence of \"z\" is at index 3.\nReverse the part of word from 0 to 3 (inclusive), the resulting string is \"zxyxxe\".\nExample 3:\nInput: word = \"abcd\", ch = \"z\"\nOutput: \"abcd\"\nExplanation: \"z\" does not exist in word.\nYou should not do any reverse operation, the resulting string is \"abcd\".",
    "type": "text"
  },
  {
    "page": 4,
    "bbox": null,
    "text": "9. Regular Expression Matching ( #10 )\nGiven an input string s and a pattern p, implement regular expression matching with support\nfor '.' and '*' where:\ne '.' Matches any single character.\ne '*' Matches zero or more of the preceding element.\nThe matching should cover the entire input string (not partial).\nExample 1:\nInput: s = \"aa\", p=\"a\"\nOutput: false\nExplanation: \"a\" does not match the entire string \"aa\".\nExample 2:\nInput: s = \"aa\", p=\"a*\"\nOutput: true\nExplanation: '*' means zero or more of the preceding element, 'a'. Therefore, by repeating 'a'\nonce, it becomes \"aa\".\nExample 3:\nInput: s = \"ab\", p =\".*\"\nOutput: true\nExplanation: \".*\" means \"zero or more (*) of any character (.)\".\n\n10. Decode String ( #394 )\nGiven an encoded string, return its decoded string. The encoding rule is: k[encoded_string], where\nthe encoded_string inside the square brackets is being repeated exactly k times. Note that k is\nguaranteed to be a positive integer. You may assume that the input string is always valid; there\nare no extra white spaces, square brackets are well-formed, etc. Furthermore, you may assume\nthat the original data does not contain any digits and that digits are only for those repeat\nnumbers, k. For example, there will not be input like 3a or 2[4]. The test cases are generated so\nthat the length of the output will never exceed 10Â°.\nExample 1:\nInput: s = \"3[a]2[bc]\"\nOutput: \"aaabcbc\"\nExample 2:\nInput: s = \"\"3[a2[c]]\"\nOutput: \"accaccacc\"\nExample 3:\nInput: s = \"\"2[abc]3[cd]ef\"\nOutput: \"abcabccdcdcdef\"\n\n11. Generate Parentheses ( #22 )\nGiven n pairs of parentheses, write a function to generate all combinations of well-formed\nparentheses.\nExample 1:\nInput: n =3\nOutput: [\"((()))\",\"(O0)\", (0 \"00\" \"000\"\nExample 2:\nInput: n= 1\nOutput: [\"()\"]",
    "type": "text"
  },
  {
    "page": 5,
    "bbox": null,
    "text": "12. Palindrome Number ( #9 )\nGiven an integer x, return true if x is a palindrome, and false otherwise.\nExample 1:\nInput: x = 121\nOutput: true\nExplanation: 121 reads as 121 from left to right and from right to left.\nExample 2:\nInput: x = -121\nOutput: false\nExplanation: From left to right, it reads -121. From right to left, it becomes 121-. Therefore it is\nnot a palindrome.\nExample 3:\nInput: x = 10\nOutput: false\nExplanation: Reads 01 from right to left. Therefore it is not a palindrome.\n\n13. Jump Game II ( #45 )\nYou are given a 0-indexed array of integers nums of length n. You are initially positioned\nat index 0.\nEach element nums|i] represents the maximum length of a forward jump from index i. In\nother words, if you are at index i, you can jump to any index (i + j) where:\ne O<=j<=nums[i] and\ne itj<n\nReturn the minimum number of jumps to reach index n - 1. The test cases are generated such\nthat you can reach index n - 1.\nExample 1:\nInput: nums = [2,3,1,1,4]\nOutput: 2\nExplanation: The minimum number of jumps to reach the last index is 2. Jump 1 step from\nindex 0 to 1, then 3 steps to the last index.\nExample 2:\nInput: nums = [2,3,0,1,4]\nOutput: 2\n\n14. Repeated Substring Pattern ( #459 )\nGiven a string s, check if it can be constructed by taking a substring of it and appending\nmultiple copies of the substring together.\nExample 1:\nInput: s = \"abab\"\nOutput: true\nExplanation: It is the substring \"ab\" twice.\nExample 2:\nInput: s = \"aba\"\nOutput: false",
    "type": "text"
  },
  {
    "page": 6,
    "bbox": null,
    "text": "15. Roman to Integer ( #13 )\nRoman numerals are represented by seven different symbols: |, V, X, L, C, Dand M.\nSymbol Value\n| 1\nV 5\nX 10\nL 50\nC 100\nD 500\nM 1000\nFor example, 2 is written as Il in Roman numeral, just two ones added together. 12 is written\nas XII, which is simply X + Il. The number 27 is written as XXVII, which is XX + V + Il.\nRoman numerals are usually written largest to smallest from left to right. However, the\nnumeral for four is not Illl. Instead, the number four is written as IV. Because the one is\nbefore the five we subtract it making four. The same principle applies to the number nine,\nwhich is written as IX. There are six instances where subtraction is used:\ne [canbe placed before V (5) and X (10) to make 4 and 9.\ne Xcan be placed before L (50) and C (100) to make 40 and 90.\ne Ccan be placed before D (500) and M (1000) to make 400 and 900.\nGiven a roman numeral, convert it to an integer.\nExample 1:\nInput: s = \"II\"\nOutput: 3\nExplanation: Ill = 3.\nExample 2:\nInput: s = \"LVIII\"\nOutput: 58\nExplanation: L = 50, V=5, Ill = 3.\nExample 3:\nInput: s = \"MCMXCIV\"\nOutput: 1994\nExplanation: M = 1000, CM = 900, XC = 90 and IV = 4.\n\n16. Add Binary ( #67 )\nGiven two binary strings a and b, return their sum as a binary string.\nExample 1:\nInput: a= \"11\", b=\"1\"\nOutput: \"100\"\nExample 2:\nInput: a = \"1010\", b = \"1011\"\nOutput: \"10101\"",
    "type": "text"
  },
  {
    "page": 7,
    "bbox": null,
    "text": "17. Number of Matching Subsequences ( #792 )\nGiven a string s and an array of strings words, return the number of words|i] that is a\nsubsequence of s.\nA subsequence of a string is a new string generated from the original string with some\ncharacters (can be none) deleted without changing the relative order of the remaining\ncharacters.\n\ne For example, \"ace\" is a subsequence of \"abcde\".\nExample 1:\nInput: s = \"abcde\", words = [\"a\",\"bb\",\"acd\",\"ace\"]\nOutput: 3\nExplanation: There are three strings in words that are a subsequence of s:\"\"a\", \"acd\", \"ace\".\nExample 2:\nInput: s = \"dsahjpjauf\", words = [\"ahjpjau\",\"ja\",\"\nOutput: 2\n\nahbwzgqnuk\",\"tnmlanowax\"]\n\n18. Reverse Vowels of a String ( #345 )\nGiven a string s, reverse only all the vowels in the string and return it. The vowels are âaâ, 'eâ, 'i', 'o',\nand 'u', and they can appear in both lower and upper cases, more than once.\nExample 1:\nInput: s = \"IceCreAm\"\nOutput: \"AceCrelm\"\nExplanation:\nThe vowels ins are ['lâ, âeâ, 'e', 'A']. On reversing the vowels, s becomes \"AceCrelm\".\nExample 2:\nInput: s = \"leetcode\"\nOutput: \"leotcede\"\n\n19. Count Binary Substrings ( #696 )\nGiven a binary string s, return the number of non-empty substrings that have the same number\nof 0's and 1's, and all the O's and all the 1's in these substrings are grouped consecutively.\nSubstrings that occur multiple times are counted the number of times they occur.\nExample 1:\nInput: s = \"00110011\"\nOutput: 6\nExplanation: There are 6 substrings that have equal number of consecutive 1's and 0's:\n\"0011\", \"01\", \"1100\", \"10\", \"0011\", and \"01\".\nNotice that some of these substrings repeat and are counted the number of times they\noccur.\nAlso, \"00110011\" is not a valid substring because all the O's (and 1's) are not grouped\ntogether.\nExample 2:\nInput: s = \"10101\"\nOutput: 4\nExplanation: There are 4 substrings: \"10\", \"01\", \"10\", \"01\" that have equal number of\nconsecutive 1's and 0's.",
    "type": "text"
  },
  {
    "page": 8,
    "bbox": null,
    "text": "20. Find All Anagrams in a String ( #438 )\nGiven two strings s and p, return an array of all the start indices of p's anagrams in s. You\nmay return the answer in any order.\nExample 1:\nInput: s = \"cbaebabacd\", p = \"abc\"\nOutput: [0,6]\nExplanation:\nThe substring with start index = 0 is \"cba\", which is an anagram of \"abc\".\nThe substring with start index = 6 is \"bac\", which is an anagram of \"abc\".\nExample 2:\nInput: s = \"\"abab\", p = \"ab\"\nOutput: [0,1,2]\nExplanation:\nThe substring with start index = 0 is \"ab\", which is an anagram of \"ab\".\nThe substring with start index = 1 is \"ba\", which is an anagram of \"ab\".\nThe substring with start index = 2 is \"ab\", which is an anagram of \"ab\".",
    "type": "title"
  }
]