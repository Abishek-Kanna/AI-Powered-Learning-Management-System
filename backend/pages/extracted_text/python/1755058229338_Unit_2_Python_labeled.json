[
  {
    "page": 1,
    "bbox": null,
    "text": "Unit 2: Control Structure, Operators, and Functions\n\n1. Merge Two Sorted Lists ( #21 )\nYou are given the heads of two sorted linked lists list1 and list2. Merge the two lists into\none sorted list. The list should be made by splicing together the nodes of the first two lists.\nReturn the head of the merged linked list.\nExample 1:\nInput: list1 = [1,2,4], list2 = [1,3,4]\nOutput: [1,1,2,3,4,4]\nExample 2:\nInput: list1 = [], list2 = []\nOutput: []\nExample 3:\nInput: list1 = [], list2 = [0]\nOutput: [0]\n\n2. Reverse Linked List ( #206 )\nGiven the head of a singly linked list, reverse the list, and return the reversed list.\nExample 1:\n\nInput: head = [1,2,3,4,5]\nOutput: [5,4,3,2,1]\nExample 2:\n\nInput: head = [1,2]\nOutput: [2,1]\n\nExample 3:\n\nInput: head = []\n\nOutput: []\n\n3. Path Sum (#112 )\nGiven the root of a binary tree and an integer targetSum, return true if the tree has a root-to-\nleaf path such that adding up all the values along the path equals targetSum. A leaf is a node\nwith no children.\nExample 1:\nInput: root = [5,4,8,11,null,13,4,7,2,null,null,null,1], targetSum = 22\nOutput: true\nExplanation: The root-to-leaf path with the target sum is shown.\nExample 2:\nInput: root = [1,2,3], targetSum =5\nOutput: false\nExplanation: There are two root-to-leaf paths in the tree:\n(1 --> 2): The sum is 3.\n(1 --> 3): The sum is 4.\nThere is no root-to-leaf path with sum = 5.\nExample 3:\nInput: root = [], targetSum = 0\nOutput: false\nExplanation: Since the tree is empty, there are no root-to-leaf paths.",
    "type": "text"
  },
  {
    "page": 2,
    "bbox": null,
    "text": "4. Linked List Cycle\nGiven head, the head of a linked list, determine if the linked list has a cycle in it. There is a cycle in\na linked list if there is some node in the list that can be reached again by continuously following\nthe next pointer. Internally, pos is used to denote the index of the node that tail's next pointer is\nconnected to. Note that pos is not passed as a parameter. Return true if there is a cycle in the\nlinked list. Otherwise, return false.\nExample 1:\nInput: head = [3,2,0,-4], pos = 1\nOutput: true\nExplanation: There is a cycle in the linked list, where the tail connects to the 1st node (0-\nindexed).\nExample 2:\nInput: head = [1,2], pos = 0\nOutput: true\nExplanation: There is a cycle in the linked list, where the tail connects to the Oth node.\nExample 3:\nInput: head = [1], pos = -1\nOutput: false\nExplanation: There is no cycle in the linked list.\n\n5. First Bad Version ( #278 )\nYou are a product manager and currently leading a team to develop a new product.\nUnfortunately, the latest version of your product fails the quality check. Since each version is\ndeveloped based on the previous version, all the versions after a bad version are also bad.\nSuppose you have n versions [1, 2, ..., n] and you want to find out the first bad one, which causes\nall the following ones to be bad. You are given an API bool isBadVersion(version) which returns\nwhether version is bad. Implement a function to find the first bad version. You should minimize\nthe number of calls to the API.\nExample 1:\nInput: n =5, bad =4\nOutput: 4\nExplanation:\ncall isBadVersion(3) -> false\ncall isBadVersion(5) -> true\ncall isBadVersion(4) -> true\nThen 4 is the first bad version.\nExample 2:\nInput: n=1, bad =1\nOutput: 1",
    "type": "text"
  },
  {
    "page": 3,
    "bbox": null,
    "text": "6. Add Digits ( #258 )\nGiven an integer num, repeatedly add all its digits until the result has only one digit, and return it.\nExample 1:\nInput: num = 38\nOutput: 2\nExplanation: The process is\n38 -->34+8-->11\n11 -->1+1-->2\nSince 2 has only one digit, return it.\nExample 2:\nInput: num = 0\nOutput: 0\n\n7. Climbing Stairs ( #70 )\nYou are climbing a staircase. It takes n steps to reach the top. Each time you can either\nclimb 1 or 2 steps. In how many distinct ways can you climb to the top?\nExample 1:\nInput: n = 2\nOutput: 2\nExplanation: There are two ways to climb to the top.\n1.1 step +1 step\n2. 2 steps\nExample 2:\nInput: n =3\nOutput: 3\nExplanation: There are three ways to climb to the top.\n1. 1 step + 1 step + 1 step\n2. 1 step + 2 steps\n3. 2 steps + 1 step\n\n8. Remove Duplicates from Sorted Array ( #26 )\n\nGiven an integer array nums sorted in non-decreasing order, remove the duplicates in-\nplace such that each unique element appears only once. The relative order of the elements\nshould be kept the same. Then return the number of unique elements in nums.\n\nConsider the number of unique elements of nums to be k, to get accepted, you need to do\nthe following things:\n\ne Change the array nums such that the first k elements of nums contain the unique\nelements in the order they were present in nums initially. The remaining elements\nof nums are not important as well as the size of nums.\n\ne Returnk.\n\nExample 1:\n\nInput: nums = [1,1,2]\n\nOutput: 2, nums = [1,2, ]\n\nExplanation: Your function should return k = 2, with the first two elements of nums being 1\nand 2 respectively.\n\nIt does not matter what you leave beyond the returned k (hence they are underscores).\nExample 2:",
    "type": "text"
  },
  {
    "page": 4,
    "bbox": null,
    "text": "Input: nums = [0,0,1,1,1,2,2,3,3,4]\n\nExplanation: Your function should return k = 5, with the first five elements of nums being 0,\n1, 2, 3, and 4 respectively.\n\nIt does not matter what you leave beyond the returned k (hence they are underscores).\n\n9. Length of Last Word ( #58 )\nGiven a string s consisting of words and spaces, return the length of the last word in the string.\nA word is a maximal substring consisting of non-space characters only.\n\nExample 1:\n\nInput: s = \"Hello World\"\n\nOutput: 5\n\nExplanation: The last word is \"World\" with length 5.\nExample 2:\n\nInput:s=\" fly me to the moon \"\n\nOutput: 4\n\nExplanation: The last word is \"moon\" with length 4.\nExample 3:\n\nInput: s = \"luffy is still joyboy\"\n\nOutput: 6\n\nExplanation: The last word is \"joyboy\" with length 6.\n\n10. Maximum Subarray (#53 )\nGiven an integer array nums, find the subarray with the largest sum, and return its sum.\n\nExample 1:\n\nInput: nums = [-2,1,-3,4,-1,2,1,-5,4]\n\nOutput: 6\n\nExplanation: The subarray [4,-1,2,1] has the largest sum 6.\nExample 2:\n\nInput: nums = [1]\n\nOutput: |\n\nExplanation: The subarray [1] has the largest sum 1.\nExample 3:\n\nInput: nums = [5,4,-1,7,8]\n\nOutput: 23\n\nExplanation: The subarray [5,4,-1,7,8] has the largest sum 23.\n\n11. Best Time to Buy and Sell Stock II ( #122 )\nYou are given an integer array prices where prices[i] is the price of a given stock on the i day. On\neach day, you may decide to buy and/or sell the stock. You can only hold at most one share of\nthe stock at any time. However, you can buy it then immediately sell it on the same day. Find and\nreturn the maximum profit you can achieve.\nExample 1:\nInput: prices = [7,1,5,3,6,4]\nOutput: 7\nExplanation: Buy on day 2 (price = 1) and sell on day 3 (price = 5), profit = 5-1 = 4.\nThen buy on day 4 (price = 3) and sell on day 5 (price = 6), profit = 6-3 = 3.\nTotal profit is 4+ 3 =7.\nExample 2:\nInput: prices = [1,2,3,4,5]",
    "type": "text"
  },
  {
    "page": 5,
    "bbox": null,
    "text": "Output: 4\n\nExplanation: Buy on day | (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4.\n\nTotal profit is 4.\n\nExample 3:\n\nInput: prices = [7,6,4,3,1]\n\nOutput: 0\n\nExplanation: There is no way to make a positive profit, so we never buy the stock to achieve\nthe maximum profit of 0.\n\n12. Valid Palindrome\nA phrase is a palindrome if, after converting all uppercase letters into lowercase letters and\nremoving all non-alphanumeric characters, it reads the same forward and backward.\nAlphanumeric characters include letters and numbers. Given a string s, return true if it is\na palindrome, or false otherwise.\n\nExample 1:\n\nInput: s = \"A man, a plan, a canal: Panama\"\n\nOutput: true\n\nExplanation: \"amanaplanacanalpanama\" is a palindrome.\nExample 2:\n\nâ€”t\n\nInput: s = \"race a car\"\n\nOutput: false\n\nExplanation: \"raceacar\" is not a palindrome.\n\nExample 3:\n\nInput: s=\"\"\n\nOutput: true\n\nExplanation: s is an empty string '\"\" after removing non-alphanumeric characters.\nSince an empty string reads the same forward and backward, it is a palindrome.\n\nwe\n\n13. Longest Common Prefix (#14 )\nWrite a function to find the longest common prefix string amongst an array of strings. If there is\nno common prefix, return an empty string \"\".\nExample 1:\nInput: strs = [\"flower\",\"flow\",\"flight\"]\nOutput: \"fl\"\nExample 2:\nInput: strs = [\"dog\",\"racecar\",\"car\"]\nOutput: \"\"\nExplanation: There is no common prefix among the input strings.\n\n14. Counting Bits ( #338 )\nGiven an integer n, return an array ans of length n+ 1 such that for each i (0 <=1<=\nn), ans[i] is the number of 1's in the binary representation of 1.\nExample 1:\nInput: n = 2\nOutput: [0,1,1]\nExplanation:\n0 --> 0\n1 -->1\n2 --> 10",
    "type": "text"
  },
  {
    "page": 6,
    "bbox": null,
    "text": "Example 2:\n\nInput: n = 5\n\nOutput: [0,1,1,2,1,2]\nExplanation:\n\n0 -->0\n\n1 -->1\n\n2 --> 10\n\n3 --> 11\n\n4 --> 100\n\n5 --> 101\n\n15. Rotate Array (#189 )\nGiven an integer array nums, rotate the array to the right by k steps, where k is non-negative.\nExample 1:\nInput: nums = [1,2,3,4,5,6,7], k = 3\nOutput: [5,6,7,1,2,3,4]\nExplanation:\nrotate 1 steps to the right: [7,1,2,3,4,5,6]\nrotate 2 steps to the right: [6,7,1,2,3,4,5]\nrotate 3 steps to the right: [5,6,7,1,2,3,4]\nExample 2:\nInput: nums = [-1,-100,3,99], k = 2\nOutput: [3,99,-1,-100]\nExplanation:\nrotate 1 steps to the right: [99,-1,-100,3]\nrotate 2 steps to the right: [3,99,-1,-100]\n\n16. Length of Last Word ( #58 )\nGiven a string s consisting of words and spaces, return the length of the last word in the\n\nstring. A word is a maximal substring consisting of non-space characters only.\n\nExample 1:\n\nInput: s = \"Hello World\"\n\nOutput: 5\n\nExplanation: The last word is \"World\" with length 5.\nExample 2:\n\nInput:s=\" fly me to the moon\nOutput: 4\n\nExplanation: The last word is \"moon\" with length 4.\nExample 3:\n\nInput: s = \"luffy is still joyboy\"\n\nOutput: 6\n\nExplanation: The last word is \"joyboy\" with length 6.\n\n\"",
    "type": "text"
  },
  {
    "page": 7,
    "bbox": null,
    "text": "17. Reverse Bits ( #190 )\nReverse bits of a given 32 bits unsigned integer.\nExample 1:\nInput: n = 43261596\nOutput: 964176192\nExplanation:\nInteger Binary\n43261596 00000010100101000001111010011100\n964176192 00111001011110000010100101000000\nExample 2:\nInput: n = 2147483644\nOutput: 1073741822\nExplanation:\nInteger Binary\n2147483644 01111111111111111111111111111100\n1073741822 00111111111111111111111111111110\n\n18. Reverse String ( #344 )\nWrite a function that reverses a string. The input string is given as an array of characters s. You\nmust do this by modifying the input array in-place with O(1) extra memory.\nExample 1:\nInput: s = [\"h\",\"e o\"]\nOutput: [\"o\",\"1\",\"1\",\"e\",\"h\"]\nExample 2:\nInput: s = [\"H\",\"a\",\"n\",\"n\",\"a\",\"h\"]\nOutput: [\"h\",\"a\",\"n\",\"n\",\"a\",\"H\"]\n\nUL ee A\nYee,\n\n19. Majority Element ( #169 )\nGiven an array nums of size n, return the majority element. The majority element is the element\nthat appears more than [n/ 2] times. You may assume that the majority element always exists in\nthe array.\nExample 1:\nInput: nums = [3,2,3]\nOutput: 3\nExample 2:\nInput: nums = [2,2,1,1,1,2,2]\nOutput: 2\n\n20. Best Time to Buy and Sell Stock ( #121 )\nYou are given an array prices where prices[i] is the price of a given stock on the iÂ» day. You want to\nmaximize your profit by choosing a single day to buy one stock and choosing a different day in\nthe future to sell that stock. Return the maximum profit you can achieve from this transaction. If\nyou cannot achieve any profit, return 0.\nExample 1:\nInput: prices = [7,1,5,3,6,4]\nOutput: 5\nExplanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.",
    "type": "text"
  },
  {
    "page": 8,
    "bbox": null,
    "text": "Note that buying on day 2 and selling on day 1 is not allowed because you must buy before\nyou sell.\n\nExample 2:\n\nInput: prices = [7,6,4,3,1]\n\nOutput: 0\n\nExplanation: In this case, no transactions are done and the max profit = 0.",
    "type": "text"
  }
]